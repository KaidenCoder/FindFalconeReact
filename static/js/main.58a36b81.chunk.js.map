{"version":3,"sources":["components/secondary/NotFound.js","components/secondary/SuccessFound.js","components/secondary/FindFalcon.js","constants/Constant.js","components/main/DropDownList.js","components/main/Footer.js","components/main/Header.js","App.js","reportWebVitals.js","index.js"],"names":["NotFound","className","SuccessFound","props","time","planet","FindFalcon","useState","find","setFind","useEffect","params","JSON","stringify","token","planet_names","planets","vehicle_names","vehicles","fetch","method","headers","Accept","body","post_bodyGenerator","then","response","json","data","status","planet_name","DropDownList","setToken","setPlanets","setVehicles","selectPlanets","setSelectPlanets","selectVehicles","setSelectVehicles","totalTime","setTotalTime","planetIdx","handlePlanetSelect","e","target","value","vehicleIdx","handleVehicleSelect","validateDistance","preventDefault","distance","max_distance","allSelectedPlanets","name","allSelectedVehicles","allSelectedTime","speed","settingPlanetsAgain","total_no","settingVehiclesAgain","length","map","empty","idx","onSubmit","onChange","index","disabled","add","Footer","href","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58a36b81.chunk.js","sourcesContent":["import React from 'react'\n\nconst NotFound = () => {\n    return (\n        <div>\n            <p className=\"ptag\">Queen AI Falcon cannot be found</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import React from 'react'\n\nconst SuccessFound = (props) => {\n    return (\n        <div>\n            <p className=\"ptag\">Success! ðŸ¤© Congratulations on Finding Falcone. King Shan is mighty pleasedðŸ˜€.</p>\n            <p>Total time taken: {props.time}</p>\n            <p>Planet found:  {props.planet}</p> \n        </div>\n    )\n}\n\nexport default SuccessFound\n","import React, {useState, useEffect} from 'react'\nimport { FIND_URL } from '../../constants/Constant'\nimport NotFound from './NotFound'\nimport SuccessFound from './SuccessFound'\n\nconst FindFalcon = (props) => {\n\n    const [find, setFind] = useState([])\n    function post_bodyGenerator(params) {\n        return {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: params,\n        }      \n      }\n    \n    useEffect(() => {  \n        // fetching the status data \n        // Passing all the user selected planets, selected vehicles and token to post method body        \n        let params = JSON.stringify({\n            token: props.token.token,\n            planet_names: props.planets,\n            vehicle_names: props.vehicles,\n        })\n        fetch(FIND_URL,post_bodyGenerator(params))\n        .then(response=> response.json())\n        .then(data => setFind(data))\n      }, [])\n\n    //Display whether Falcon is found or not\n    return (\n        <div data-testid=\"findfalcon\">\n           {find.status == 'success' ? \n           <SuccessFound time={props.time} planet={find.planet_name}/> : \n           <NotFound/>}\n        </div>\n    )\n}\n\nexport default FindFalcon\n","export const PLANETS_URL = \"https://findfalcone.herokuapp.com/planets\"\nexport const VEHICLES_URL = \"https://findfalcone.herokuapp.com/vehicles\"\nexport const TOKEN_URL = \"https://findfalcone.herokuapp.com/token\"\nexport const FIND_URL = \"https://findfalcone.herokuapp.com/find\"","import React, {useState, useEffect} from 'react'\nimport { PLANETS_URL, VEHICLES_URL, TOKEN_URL } from '../../constants/Constant'\nimport FindFalcon from '../secondary/FindFalcon'\n\nconst DropDownList = () => {\n\n    // all values storage\n    const [token, setToken] = useState({})\n    const [planets, setPlanets] = useState([])\n    const [vehicles, setVehicles] = useState([])\n\n    // selected values storage\n    const [selectPlanets, setSelectPlanets] = useState([]) \n    const [selectVehicles, setSelectVehicles] = useState([])\n    const [totalTime, setTotalTime] = useState(0)\n\n    // store the index of the planet selected by the user\n    let planetIdx = 0\n    const handlePlanetSelect = (e) => {\n        planetIdx  = e.target.value \n    }\n\n    // store the index of the vehicle selected by the user\n    let vehicleIdx = 0\n    const handleVehicleSelect = (e) => {\n        vehicleIdx = e.target.value\n    }\n\n   \n    // Function trigered when submit button is clicked\n    const validateDistance = (e) => {\n        e.preventDefault()\n         // When submit button is clicked, we validate if vehicle max distance is greater than planet distance\n        if(planets[planetIdx].distance <= vehicles[vehicleIdx].max_distance){\n            // adding selected planets to the useState value selectPlanets\n            let allSelectedPlanets = [...selectPlanets,planets[planetIdx].name]\n            setSelectPlanets(allSelectedPlanets)\n             // adding selected vehicles to the useState value selectVehicles\n            let allSelectedVehicles = [...selectVehicles,vehicles[vehicleIdx].name]\n            setSelectVehicles(allSelectedVehicles)\n            // adding selected total time to the useState value totalTime\n            // we also calculate the time taken by each vechicle by calculating distance/speed\n            let allSelectedTime = totalTime + vehicles[vehicleIdx].max_distance/vehicles[vehicleIdx].speed;\n            setTotalTime(allSelectedTime)\n\n            // Adding the key add for those planets which has been selected\n            // if the key add exists for the planet, the option for selecting this planets becomes disabled\n            planets[planetIdx]['add'] = true\n            let settingPlanetsAgain = [...planets]\n            setPlanets(settingPlanetsAgain)\n \n            if(vehicles[vehicleIdx].total_no > 1){\n                // this condition is applied if there are more than one vehicle of the same type\n                // we decrease the count of this vehicles by one\n                vehicles[vehicleIdx].total_no -= 1  \n                // Now we set the state of the vehicles to the new vehicles value   \n                let settingVehiclesAgain = [...vehicles]\n                setVehicles(settingVehiclesAgain)\n            }\n            else if(vehicles[vehicleIdx].total_no == 1){\n                // This condition is applied if there is one vehicle of a particular type\n                // Adding the key add for those vehicles which has been selected\n                // if the key add exists for the vehcile, the option for selecting this vehicle becomes disabled\n                vehicles[vehicleIdx]['add'] = true\n                vehicles[vehicleIdx].total_no -= 1\n                // Now we set the state of the vehicles to the new vehicles value \n                let settingVehiclesAgain = [...vehicles]\n                setVehicles(settingVehiclesAgain)      \n            }\n        }        \n    }\n\n    useEffect(() => {\n        // fetching planets data to useState value\n        fetch(PLANETS_URL)\n        .then(response=> response.json())\n        .then(data =>  setPlanets(data))\n\n        // fetching vehicles data to useState value\n        fetch(VEHICLES_URL)\n        .then(response=> response.json())\n        .then(data => setVehicles(data))\n\n        // fetching token data\n        fetch(TOKEN_URL, {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({}),\n          })\n          .then(response=> response.json())\n          .then(data => setToken(data))\n    }, [])\n\n    // Display all the dropdown list values of planets and vehicles\n    return (\n        <div>\n            {selectPlanets.length != 4 ?\n                <div className=\"dropdown\" data-testid=\"dropdown-test\">\n                {[1,2,3,4].map((empty,idx) => (\n                    <div key={idx}>\n                        <p><span className=\"destination\">Destination {idx+1}</span></p>\n                            <form onSubmit={validateDistance}>          \n                            <select onChange={handlePlanetSelect} >\n                                {planets.map((data,index) => (            \n                                    <option  key={index} value={index} disabled={data.add ? true : false}>{data.name}</option>                \n                                ))}      \n                            </select>\n                            <select onChange={handleVehicleSelect}>\n                                {vehicles.map((data, index) => (            \n                                    <option key={index}  value={index} disabled={data.add? true : false}>{data.name}</option>                \n                                ))}      \n                            </select>\n                            <button>Submit</button>\n                            </form>\n                        <hr className=\"hr\"/>\n                    </div>                    \n                ))}\n                </div>:\n                <>\n                    <FindFalcon planets={selectPlanets} vehicles={selectVehicles} token={token} time={totalTime}/>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default DropDownList\n","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <h3>Coding Challenge <span><a href=\"https://www.geektrust.in/coding-problem/frontend/space\">Link</a></span></h3>\n        </div>\n    )\n}\n\nexport default Footer\n","import React from 'react'\n\nconst Header = () => {\n    return (\n        <div>\n            <h1>Finding Falcone! <span className=\"reset\"><a href=\"https://kurosakicoder.github.io/FindFalconeReact\">Reset</a></span></h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './App.css';\nimport DropDownList from './components/main/DropDownList';\nimport Footer from './components/main/Footer';\nimport Header from './components/main/Header';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Header/>\n            <hr/>\n        <DropDownList />\n        <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}